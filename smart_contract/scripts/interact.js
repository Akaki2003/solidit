const hre = require("hardhat");
const { ethers } = hre;

async function main() {
  // Hardhat Network provides a list of accounts for testing
  const accounts = await ethers.getSigners();

  // Replace with your contract's ABI and address
  const contractAddress = "0x703E5953Ee53f411e30Bb216239c3446BBAf33ad";
  const contractAbi = [
    {
      _format: "hh-sol-artifact-1",
      contractName: "Transactions",
      sourceName: "contracts/Transactions.sol",
      abi: [
        {
          inputs: [
            {
              internalType: "string",
              name: "title",
              type: "string",
            },
            {
              internalType: "string",
              name: "description",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "price",
              type: "uint256",
            },
          ],
          name: "AddToBlockchain",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "Id",
                  type: "uint256",
                },
                {
                  internalType: "string",
                  name: "Title",
                  type: "string",
                },
                {
                  internalType: "address",
                  name: "Author",
                  type: "address",
                },
                {
                  internalType: "string",
                  name: "Description",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "Price",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256",
                },
              ],
              internalType: "struct Transactions.ItemStruct",
              name: "item",
              type: "tuple",
            },
          ],
          name: "EditItem",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "GetAllItems",
          outputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "Id",
                  type: "uint256",
                },
                {
                  internalType: "string",
                  name: "Title",
                  type: "string",
                },
                {
                  internalType: "address",
                  name: "Author",
                  type: "address",
                },
                {
                  internalType: "string",
                  name: "Description",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "Price",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256",
                },
              ],
              internalType: "struct Transactions.ItemStruct[]",
              name: "",
              type: "tuple[]",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
          ],
          name: "GetItemById",
          outputs: [
            {
              components: [
                {
                  internalType: "uint256",
                  name: "Id",
                  type: "uint256",
                },
                {
                  internalType: "string",
                  name: "Title",
                  type: "string",
                },
                {
                  internalType: "address",
                  name: "Author",
                  type: "address",
                },
                {
                  internalType: "string",
                  name: "Description",
                  type: "string",
                },
                {
                  internalType: "uint256",
                  name: "Price",
                  type: "uint256",
                },
                {
                  internalType: "uint256",
                  name: "timestamp",
                  type: "uint256",
                },
              ],
              internalType: "struct Transactions.ItemStruct",
              name: "",
              type: "tuple",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [],
          name: "ItemCount",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "id",
              type: "uint256",
            },
          ],
          name: "RemoveItemById",
          outputs: [],
          stateMutability: "nonpayable",
          type: "function",
        },
        {
          inputs: [],
          name: "getItemCount",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
        },
      ],
      bytecode:
        "0x608060405234801561001057600080fd5b50610c6a806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637749cf231161005b5780637749cf23146100d7578063924dbabd146100df578063b6618983146100f4578063e36ae6241461010757600080fd5b8063389271ed146100825780635a663b91146100a0578063759d0999146100b7575b600080fd5b61008a61011a565b6040516100979190610801565b60405180910390f35b6100a960005481565b604051908152602001610097565b6100ca6100c5366004610863565b6102d2565b604051610097919061087c565b6000546100a9565b6100f26100ed366004610863565b6104a0565b005b6100f2610102366004610962565b610506565b6100f26101153660046109eb565b6105f6565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156102c957838290600052602060002090600602016040518060c00160405290816000820154815260200160018201805461017b90610aae565b80601f01602080910402602001604051908101604052809291908181526020018280546101a790610aae565b80156101f45780601f106101c9576101008083540402835291602001916101f4565b820191906000526020600020905b8154815290600101906020018083116101d757829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201805460409092019161022490610aae565b80601f016020809104026020016040519081016040528092919081815260200182805461025090610aae565b801561029d5780601f106102725761010080835404028352916020019161029d565b820191906000526020600020905b81548152906001019060200180831161028057829003601f168201915b50505050508152602001600482015481526020016005820154815250508152602001906001019061013e565b50505050905090565b6103146040518060c00160405280600081526020016060815260200160006001600160a01b031681526020016060815260200160008152602001600081525090565b6001828154811061032757610327610ae8565b90600052602060002090600602016040518060c00160405290816000820154815260200160018201805461035a90610aae565b80601f016020809104026020016040519081016040528092919081815260200182805461038690610aae565b80156103d35780601f106103a8576101008083540402835291602001916103d3565b820191906000526020600020905b8154815290600101906020018083116103b657829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201805460409092019161040390610aae565b80601f016020809104026020016040519081016040528092919081815260200182805461042f90610aae565b801561047c5780601f106104515761010080835404028352916020019161047c565b820191906000526020600020905b81548152906001019060200180831161045f57829003601f168201915b50505050508152602001600482015481526020016005820154815250509050919050565b600181815481106104b3576104b3610ae8565b600091825260208220600690910201818155906104d360018301826106fa565b6002820180546001600160a01b03191690556104f36003830160006106fa565b5060006004820181905560059091015550565b60016000808282546105189190610afe565b9250508190555060006040518060c001604052806000548152602001858152602001336001600160a01b031681526020018481526020018381526020014281525090508060016000548154811061057157610571610ae8565b906000526020600020906006020160008201518160000155602082015181600101908161059e9190610b74565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201906105d99082610b74565b506080820151600482015560a09091015160059091015550505050565b600081602001515111801561061057506000816060015151115b6106605760405162461bcd60e51b815260206004820152601d60248201527f5469746c65206f72206465736372697074696f6e20697320656d707479000000604482015260640160405180910390fd5b80600182600001518154811061067857610678610ae8565b90600052602060002090600602016000820151816000015560208201518160010190816106a59190610b74565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201906106e09082610b74565b506080820151600482015560a09091015160059091015550565b50805461070690610aae565b6000825580601f10610716575050565b601f0160209004906000526020600020908101906107349190610737565b50565b5b8082111561074c5760008155600101610738565b5090565b6000815180845260005b818110156107765760208185018101518683018201520161075a565b506000602082860101526020601f19601f83011685010191505092915050565b805182526000602082015160c060208501526107b560c0850182610750565b905060018060a01b036040840151166040850152606083015184820360608601526107e08282610750565b9150506080830151608085015260a083015160a08501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561085657603f19888603018452610844858351610796565b94509285019290850190600101610828565b5092979650505050505050565b60006020828403121561087557600080fd5b5035919050565b60208152600061088f6020830184610796565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156108cf576108cf610896565b60405290565b600082601f8301126108e657600080fd5b813567ffffffffffffffff8082111561090157610901610896565b604051601f8301601f19908116603f0116810190828211818310171561092957610929610896565b8160405283815286602085880101111561094257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561097757600080fd5b833567ffffffffffffffff8082111561098f57600080fd5b61099b878388016108d5565b945060208601359150808211156109b157600080fd5b506109be868287016108d5565b925050604084013590509250925092565b80356001600160a01b03811681146109e657600080fd5b919050565b6000602082840312156109fd57600080fd5b813567ffffffffffffffff80821115610a1557600080fd5b9083019060c08286031215610a2957600080fd5b610a316108ac565b82358152602083013582811115610a4757600080fd5b610a53878286016108d5565b602083015250610a65604084016109cf565b6040820152606083013582811115610a7c57600080fd5b610a88878286016108d5565b6060830152506080830135608082015260a083013560a082015280935050505092915050565b600181811c90821680610ac257607f821691505b602082108103610ae257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b80820180821115610b1f57634e487b7160e01b600052601160045260246000fd5b92915050565b601f821115610b6f57600081815260208120601f850160051c81016020861015610b4c5750805b601f850160051c820191505b81811015610b6b57828155600101610b58565b5050505b505050565b815167ffffffffffffffff811115610b8e57610b8e610896565b610ba281610b9c8454610aae565b84610b25565b602080601f831160018114610bd75760008415610bbf5750858301515b600019600386901b1c1916600185901b178555610b6b565b600085815260208120601f198616915b82811015610c0657888601518255948401946001909101908401610be7565b5085821015610c245787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212204675c815c5a58e8030353a6d8cf9de33eadb9dc09c9272470ea806cf7ecdbdef64736f6c63430008130033",
      deployedBytecode:
        "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637749cf231161005b5780637749cf23146100d7578063924dbabd146100df578063b6618983146100f4578063e36ae6241461010757600080fd5b8063389271ed146100825780635a663b91146100a0578063759d0999146100b7575b600080fd5b61008a61011a565b6040516100979190610801565b60405180910390f35b6100a960005481565b604051908152602001610097565b6100ca6100c5366004610863565b6102d2565b604051610097919061087c565b6000546100a9565b6100f26100ed366004610863565b6104a0565b005b6100f2610102366004610962565b610506565b6100f26101153660046109eb565b6105f6565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156102c957838290600052602060002090600602016040518060c00160405290816000820154815260200160018201805461017b90610aae565b80601f01602080910402602001604051908101604052809291908181526020018280546101a790610aae565b80156101f45780601f106101c9576101008083540402835291602001916101f4565b820191906000526020600020905b8154815290600101906020018083116101d757829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201805460409092019161022490610aae565b80601f016020809104026020016040519081016040528092919081815260200182805461025090610aae565b801561029d5780601f106102725761010080835404028352916020019161029d565b820191906000526020600020905b81548152906001019060200180831161028057829003601f168201915b50505050508152602001600482015481526020016005820154815250508152602001906001019061013e565b50505050905090565b6103146040518060c00160405280600081526020016060815260200160006001600160a01b031681526020016060815260200160008152602001600081525090565b6001828154811061032757610327610ae8565b90600052602060002090600602016040518060c00160405290816000820154815260200160018201805461035a90610aae565b80601f016020809104026020016040519081016040528092919081815260200182805461038690610aae565b80156103d35780601f106103a8576101008083540402835291602001916103d3565b820191906000526020600020905b8154815290600101906020018083116103b657829003601f168201915b505050918352505060028201546001600160a01b0316602082015260038201805460409092019161040390610aae565b80601f016020809104026020016040519081016040528092919081815260200182805461042f90610aae565b801561047c5780601f106104515761010080835404028352916020019161047c565b820191906000526020600020905b81548152906001019060200180831161045f57829003601f168201915b50505050508152602001600482015481526020016005820154815250509050919050565b600181815481106104b3576104b3610ae8565b600091825260208220600690910201818155906104d360018301826106fa565b6002820180546001600160a01b03191690556104f36003830160006106fa565b5060006004820181905560059091015550565b60016000808282546105189190610afe565b9250508190555060006040518060c001604052806000548152602001858152602001336001600160a01b031681526020018481526020018381526020014281525090508060016000548154811061057157610571610ae8565b906000526020600020906006020160008201518160000155602082015181600101908161059e9190610b74565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201906105d99082610b74565b506080820151600482015560a09091015160059091015550505050565b600081602001515111801561061057506000816060015151115b6106605760405162461bcd60e51b815260206004820152601d60248201527f5469746c65206f72206465736372697074696f6e20697320656d707479000000604482015260640160405180910390fd5b80600182600001518154811061067857610678610ae8565b90600052602060002090600602016000820151816000015560208201518160010190816106a59190610b74565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201906106e09082610b74565b506080820151600482015560a09091015160059091015550565b50805461070690610aae565b6000825580601f10610716575050565b601f0160209004906000526020600020908101906107349190610737565b50565b5b8082111561074c5760008155600101610738565b5090565b6000815180845260005b818110156107765760208185018101518683018201520161075a565b506000602082860101526020601f19601f83011685010191505092915050565b805182526000602082015160c060208501526107b560c0850182610750565b905060018060a01b036040840151166040850152606083015184820360608601526107e08282610750565b9150506080830151608085015260a083015160a08501528091505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561085657603f19888603018452610844858351610796565b94509285019290850190600101610828565b5092979650505050505050565b60006020828403121561087557600080fd5b5035919050565b60208152600061088f6020830184610796565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156108cf576108cf610896565b60405290565b600082601f8301126108e657600080fd5b813567ffffffffffffffff8082111561090157610901610896565b604051601f8301601f19908116603f0116810190828211818310171561092957610929610896565b8160405283815286602085880101111561094257600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561097757600080fd5b833567ffffffffffffffff8082111561098f57600080fd5b61099b878388016108d5565b945060208601359150808211156109b157600080fd5b506109be868287016108d5565b925050604084013590509250925092565b80356001600160a01b03811681146109e657600080fd5b919050565b6000602082840312156109fd57600080fd5b813567ffffffffffffffff80821115610a1557600080fd5b9083019060c08286031215610a2957600080fd5b610a316108ac565b82358152602083013582811115610a4757600080fd5b610a53878286016108d5565b602083015250610a65604084016109cf565b6040820152606083013582811115610a7c57600080fd5b610a88878286016108d5565b6060830152506080830135608082015260a083013560a082015280935050505092915050565b600181811c90821680610ac257607f821691505b602082108103610ae257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b80820180821115610b1f57634e487b7160e01b600052601160045260246000fd5b92915050565b601f821115610b6f57600081815260208120601f850160051c81016020861015610b4c5750805b601f850160051c820191505b81811015610b6b57828155600101610b58565b5050505b505050565b815167ffffffffffffffff811115610b8e57610b8e610896565b610ba281610b9c8454610aae565b84610b25565b602080601f831160018114610bd75760008415610bbf5750858301515b600019600386901b1c1916600185901b178555610b6b565b600085815260208120601f198616915b82811015610c0657888601518255948401946001909101908401610be7565b5085821015610c245787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212204675c815c5a58e8030353a6d8cf9de33eadb9dc09c9272470ea806cf7ecdbdef64736f6c63430008130033",
      linkReferences: {},
      deployedLinkReferences: {},
    },
  ];

  // Connect to the contract using the ABI and address
  const contract = new ethers.Contract(
    contractAddress,
    contractAbi,
    accounts[0]
  );

  // Call a method on the contract
  const result = await contract.AddToBlockchain("test", "test", 3);

  // Print the result
  console.log("Result:", result);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
